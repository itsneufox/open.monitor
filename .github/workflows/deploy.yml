name: Deploy Production

on:
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: production
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
      
    - name: Install system dependencies
      run: |
        if command -v apk >/dev/null 2>&1; then
          sudo apk add --no-cache python3 make g++ pkgconfig cairo-dev pango-dev giflib-dev
          sudo ln -sf python3 /usr/bin/python
        elif command -v apt-get >/dev/null 2>&1; then
          sudo apt-get update
          sudo apt-get install -y python3 make g++ pkg-config libcairo2-dev libpango1.0-dev libgif-dev
          sudo ln -sf python3 /usr/bin/python
        else
          echo "Unknown platform detected"
          exit 1
        fi

    - name: Version management
      run: |
        git config --local user.email "mission-control@open-monitor.space"
        git config --local user.name "🛰️ Mission Control"
        
        npm ci --silent
        
        CURRENT_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "1.0.0")
        echo "Current version: v$CURRENT_VERSION"
        
        npm version patch --no-git-tag-version
        NEW_VERSION=$(node -p "require('./package.json').version")
        
        echo "NEW_VERSION=v$NEW_VERSION" >> $GITHUB_ENV
        echo "Updated to version: v$NEW_VERSION"
        
        git add package.json package-lock.json
        git commit -m "🚀 Release v$NEW_VERSION [skip ci]"
        git tag -a "v$NEW_VERSION" -m "Production release v$NEW_VERSION"
        
        git push origin production
        git push origin "v$NEW_VERSION"

    - name: Configure environment
      run: |
        cat > .env << EOF
        TOKEN=${{ secrets.DISCORD_TOKEN }}
        CLIENT_ID=${{ secrets.DISCORD_CLIENT_ID }}
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        OWNER_ID=${{ secrets.OWNER_ID }}
        NODE_ENV=production
        LOG_LEVEL=info
        BOT_VERSION=${NEW_VERSION:-latest}
        MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
        MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
        VALKEY_HOSTS=valkey:6379
        VALKEY_USE_TLS=false
        VALKEY_KEY_EXPIRY_SECONDS=540
        EOF

    - name: Deploy application
      run: |
        echo "Stopping existing containers..."
        sudo docker-compose -f /opt/open.monitor/docker-compose.yml down --timeout 30 || true
        
        echo "Preparing deployment directory..."
        sudo rm -rf /opt/open.monitor/*
        sudo mkdir -p /opt/open.monitor
        sudo cp -r * /opt/open.monitor/
        sudo chown -R github-runner:github-runner /opt/open.monitor
        
        cd /opt/open.monitor
        
        echo "Cleaning up unused images..."
        sudo docker image prune -f
        
        echo "Building application..."
        sudo docker-compose build --no-cache
        
        echo "Starting services..."
        sudo docker-compose up -d
        
        echo "Waiting for services to be ready..."
        sleep 15
        
        if [ "$(sudo docker ps -q -f name=openmonitor-bot -f status=running)" ]; then
          echo "✅ Deployment successful"
          sudo docker ps --filter name=openmonitor
          sudo docker logs openmonitor-bot --tail 10
        else
          echo "❌ Deployment failed"
          sudo docker ps -a
          sudo docker logs openmonitor-bot --tail 20 || true
          exit 1
        fi
        
        sudo docker system prune -f

    - name: Deployment summary
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "unknown")
        echo "================================="
        echo "Production Deployment Complete"
        echo "================================="
        echo "Version: v$CURRENT_VERSION"
        echo "Tag: ${NEW_VERSION}"
        echo "Time: $(date -u)"
        echo "Status: ✅ Running"
        echo "Next deployment: Tomorrow at 03:00 UTC"
        echo "================================="